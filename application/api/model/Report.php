<?php
namespace app\api\model;

use base\Grap\Grapimg;
use think\Db;
use think\facade\Log;
use think\Model;
use think\Request;


class Report extends Model
{
    public function save($data = [], $where = [], $sequence = null)
    {
        return parent::save($data, $where, $sequence); // TODO: Change the autogenerated stub
    }

    /*添加用户上报信息*/
    public function Repadd(){
        if (\request()->isPost()){
            $post_data = input('post.');
            Log::info('上报内容',$post_data);
            $validate = new \think\Validate;
            $validate->rule([
                'user_id|用户' => 'require',
                'address|事故地址' => 'require',
                'ins_type|事故类型' => 'require|in:1,2,3',
                'ins_car_name|事故车型' => 'require',
                'ins_img|事故现场图片' => 'require',
                'ins_tel|车主手机号' => '/^[1]([3-9])[0-9]{9}$/',
            ]);
            if ($validate->check($post_data)) {
                try{
                  $user_id = Member::GetUserId($post_data['user_id']);
                  if (!$user_id){return jsonResponse(-1,'','用户登录超时,请重新登录');}
                    $post_data['createtime'] = time();
                    $data = [
                        'order_num' => 'SG'.date('YmdHis').rand(10000,99999),
                        'user_id' => $user_id,
                        'createtime' =>  time(),
                        'pid' => 0
                    ];
                    Db::startTrans();
                    $order_rep_id = db('order_report')->insertGetId($data);
                    $post_data['order_id'] = $order_rep_id;
//                    $imgAll = explode('|',$post_data['ins_img']);
                    foreach ($post_data['ins_img'] as $v){
                      $g = new Grapimg();
                      $img[] = $g->base64_image_content($v,'./public/uploads/');
                    }
                    $post_data['ins_img'] = implode(',',$img);
                    $post_data['user_id'] = $user_id;
                    $bool = $this->allowField(true)->save($post_data);
                    if ($order_rep_id && $bool){
                        // 提交事务
                        db::commit();
                        return jsonResponse(1,$this->id,"上报成功");
                    }else{
                        // 事务回滚
                        db::rollback();
                    return jsonResponse(-1,'',"上报失败");
                    }
                }catch (\Exception $e){
                    jsonResponse(-1,'',$e->getMessage());
                }
            }else{
                jsonResponse(-1,'',$validate->getError());
            }
        }
    }

    /*展示个人全部上报的信息*/
    public function GetAllReport(){
        if (\request()->isPost()){
            $post_data = input('post.');
            $validate = new \think\Validate;
            $validate->rule([
                'user_id|用户' => 'require',
            ]);
            if ($validate->check($post_data)) {
                try{
                  $user_id = Member::GetUserId($post_data['user_id']);
                  if (!$user_id){return jsonResponse(-1,'','用户登录超时,请重新登录');}
                    $nowpage = isset($post_data['nowpage']) ? $post_data['nowpage'] : 1 ;
                    $count = $this->where(['user_id'=>$user_id])->count();
                    if (!$count){return jsonResponse(-1,'','暂无上报信息');}
                    $bool = $this->where(['user_id'=>$user_id])->field('id,address,createtime')->order('id desc')->limit(5)->page($nowpage)->select();
                    foreach ($bool as &$v){
                        $v['createtime'] = date('Y.m.d H:i:s',$v['createtime']);
                    }
                    $arra = ['data'=>$bool,'count'=>$count];
                    if ($bool) return jsonResponse(1,$arra,"查询成功");
                    else return jsonResponse(-1,'',"查询失败");
                }catch (\Exception $e){
                    jsonResponse(-1,'',$e->getMessage());
                }
            }else{
                jsonResponse(-1,'',$validate->getError());
            }
        }
    }

    /*展示个人单个上报的信息详情*/
    public function GetOneReport(){
        if (\request()->isPost()){
            $post_data = input('post.');
            $validate = new \think\Validate;
            $validate->rule([
                'user_id|用户' => 'require',
                'id|详情参数' => 'require',
            ]);
            if ($validate->check($post_data)) {
                try{
                    $bool = $this->where(['id'=>$post_data['id']])->find();
                    unset($bool['user_id']);
                    $bool['createtime'] = date('Y.m.d H:i:s',$bool['createtime']);
                    if ($bool) return jsonResponse(1,$bool,"查询成功");
                    else return jsonResponse(-1,'',"查询失败");
                }catch (\Exception $e){
                    jsonResponse(-1,'',$e->getMessage());
                }
            }else{
                jsonResponse(-1,'',$validate->getError());
            }
        }
    }

}